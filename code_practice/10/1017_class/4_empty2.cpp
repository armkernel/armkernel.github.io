// 4_EMPTY - 73page
//

#include <iostream>
#include <vector>
#include <list>

using namespace std;

// STL 반복자

// 1. 입력 반복자 : =*p, ++   싱글 패스만 보장
// 2. 출력 반복자 : *p=, ++   싱글 패스만 보장
//
// 멀티 패스를 보장 
// 3. 전진형 반복자 : =*p, ++, => 싱글 리스트 반복자
// 4. 양방향 반복자 : =*p, ++ , -- => 더블리스트 반복자
// 5. 임의 접근 반복자 : =*p, ++, --, +, -, [] => 연속된 메모리

// 프로그램
//
//| *p=       ^
//| 출력      | 입력
//v           | = *p
// 컨테이너 (linked list)
//
// 싱글패스란? 
// e.g => find.., input buffer (꺼내면 이미 사라지고 없음)
// 멀티패스란? (보통 멀티패스 보장)
// 반복자 두개가 동일한 구간을 지나가게 된다면 e.g. sort 

int main()
{
  //vector<int> v = { 1,2,3,4,5,6,7,8,9,10 };
  list<int> v = { 1,2,3,4,5,6,7,8,9,10 };

  auto p = v.begin();

  // 반복자 p를 5칸 전진해보세요.
  p = p + 5; // 제일 쉬운것.

  cout << *p << endl;

  p = p + 3;// 한번에 이동 가능
  // list 다 거쳐서 가야함.
  // ++list 3번 한 것과 성능이 동일하다.
  // 성능의 향상이 없으면 반복자 + 안됨.
}




