#include <iostream>
using namespace std;

class Shape
{
public:
  virtual void Draw() = 0;
};

// 추상클래스에서 파생클래스를 만드는게 중요하다.
class Rect : public Shape
{
public:
  // 추상이냐 추상이 아니냐? 
  // 순수 가상함수는 없지만..
  // 물려받음 따라서, 객체 생성시 에러발생.
  // 기반 클래스가 가지고 있는 순수 가상함수에 구현부를 제공해야함 => 구현부를 제공하면 추상이 아님.
  //
  // 컴파일 하면 에러가 없어짐.
  // 즉, Draw가 없다면 에러
  // !!!
  // 추상 클래스의 파생클래스
  // 순수 가상함수의 구현부를 제공하지 않는 경우 파생 클래스도 추상 클래스이다.
  //
  //
  // 중요한 점.
  // 추상클래스를 왜 만들 것인가?
  // Shape를 만드는 의도.
  // 앞으로 모든 도형을 만드는 사람들은 그 클래스를 사용하기 위해서는 반드시 Draw를 만들어야한다. 규칙을 정해줌. 
  // 파생클래스에 내가 정해준 이름으로 구현부를 만들어야한다. 이게 핵심.
  // 추상 클래스의 의도
  // 파생 클래스에게 특정 함수를 반드시 구현하라고 지시하는 것
};

int main()
{
  Shape s; // error..
  Shape* p; // ok..
}

// 순수 가상함수와 추상클래스에 대해 알아보자.
// C++에서는 가상함수를 만들 때, 독특한 문법을 가지고 있다. 구현 부를 만들지 않고 =0 로 끝나는 함수를 만들 수 있다. <= 순수가상함수 
//
// 순수 가상함수가 하나 이상 있으면, 추상클래스라고 칭함.
//
// 객체를 만들면, Draw를 부를 수 있어야하는데.. 못부름.. 왜? 구현이 없으니.. 객체를 생성할 수 없다. 하지만, 포인터 변수는 만들 수 있다.
//
//
//
// 순수 가상함수
// 추상 클래스
// 추상클래스 특징
// 추상클래스의 파생 클래스
// 추상클래스의 의도
